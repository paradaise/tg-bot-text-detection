from PIL import Image, ImageEnhance, ImageFilter, ImageOps
import numpy as np
from ultralytics import YOLO  # Assuming YOLOv8 is used
import easyocr
import io


def preprocess_image(image):
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = image.resize((image.width * 2, image.height * 2), Image.LANCZOS)

    # –£—Å–∏–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    enhancer = ImageEnhance.Contrast(image)
    image = enhancer.enhance(2.5)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏–∏
    image = image.convert('L')
    image = ImageOps.invert(image)  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    image = image.filter(ImageFilter.MedianFilter(size=1))  # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–µ–¥–∏–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à—É–º–∞

    return image

def perform_ocr(image):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR
    reader = easyocr.Reader(['ru', 'en'],gpu= True)

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ OCR
    result = reader.readtext(np.array(image))

    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR
    boxes = []
    txts = []
    scores = []

    for line in result:
        boxes.append(line[0])
        txts.append(line[1])
        scores.append(line[2])

    return boxes, txts, scores

def perform_ocr(image):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR
    reader = easyocr.Reader(['ru', 'en'],gpu= True)

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ OCR
    result = reader.readtext(np.array(image))

    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR
    boxes = []
    txts = []
    scores = []

    for line in result:
        boxes.append(line[0])
        txts.append(line[1])
        scores.append(line[2])

    return boxes, txts, scores

def crop_and_ocr(img_path):
    results = yolo(img_path)
    regions = [box.xyxy[0].cpu().numpy().tolist() for reg in results for box in reg.boxes] if results[0].boxes is not None else []

    image = Image.open(img_path).convert('RGB')

    if regions:
        result_msg = '<i>–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–∏–¥–µ—Ç—å:</i>\n'
        result_imgs = []

        for i, region in enumerate(regions):
            cropped_image = image.crop(region)
            cropped_image = preprocess_image(cropped_image)
            boxes, txts, scores = perform_ocr(cropped_image)

            result_img = io.BytesIO()
            cropped_image.save(result_img, format='PNG')
            result_img = result_img.getvalue()
            result_imgs.append(result_img)

            for txt, score in zip(txts, scores):
                if (score > 0.4 and regions):
                    result_msg += f"{txt}: {score:.2f}%\n"

        return result_msg, result_imgs
    else:
        result_msg = '–ú–Ω–µ –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ü•∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ'
        return result_msg, None

yolo = YOLO('best.pt')
